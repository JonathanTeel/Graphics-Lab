/*
 *
 *  Contains code for Program Code window.
 * 
 */

//Declare all variables
var code = document.getElementById('program_code');

//Point object
function makePoint(startX, startY) {
	this.startX = startX;
	this.startY = startY;
	this.type = 'point';
	this.varNum = pointVariables.length; //Index of this object in pointVariables
	this.drawNum = toDraw.length; //Index of this object in toDraw
	this.active = true; //Boolean to control if shape needs to be drawn or not
	this.assigned = true; //Boolean to control whether variable has been assigned or not
	this.varPoints = makeLink("delete1" + this.drawNum, "* ") +
		makeLink("pclick" + this.drawNum, "p" + this.varNum) + 
		" = (" + makeLink("aclick" + this.drawNum, this.startX) + "," + 
		makeLink("bclick" + this.drawNum, 300-this.startY) + ")<br>";
	this.drawLink = makeLink("delete2" + this.drawNum, "* ") +
		"draw(" + makeLink("draw" + this.drawNum, "p" + this.varNum) + ")<br>";
}
//Line object
function makeLine(startX, startY, endX, endY) {
	this.startX = startX;
	this.startY = startY;
	this.endX = endX;
	this.endY = endY;
	this.type = 'line';
	this.varNum = lineVariables.length; //Index of this object in lineVariables
	this.drawNum = toDraw.length; //Index of this object in toDraw
	this.active = true; //Boolean to control if shape needs to be drawn or not
	this.assigned = true; //Boolean to control whether variable has been assigned or not
	this.varPoints = makeLink("deleteVar" + this.drawNum, "* ") +
		makeLink("lclick" + this.drawNum, "l" + this.varNum) +
		" = ((" + makeLink("startX" + this.drawNum, this.startX) + "," +
		makeLink("startY" + this.drawNum, this.startY) + "),(" +
		makeLink("endX" + this.drawNum, this.endX) + "," +
		makeLink("endY" + this.drawNum, this.endX) + "))<br>";
	this.drawLink = makeLink("deleteDraw" + this.drawNum, "* ") +
		"draw(" + makeLink("draw" + this.drawNum, "l" + this.varNum) + ")<br>"; 
}
//Circle object
function makeCircle(startX, startY, diameter) {
	this.startX = startX;
	this.startY = startY;
	this.diameter = diameter;
	this.type = 'circle';
}
//Polygon object
function makePolygon(angles) {
	this.angles = angles.slice();
	this.type = 'polygon';
}


//writes the code in the code window using toDraw array
function writeCode() {
	var string = "";
	
	//Write HTML in program code window
	for (var i = 0; i < toDraw.length; i++) {
		if (toDraw[i].type == "point") { //Element is point object
			if (toDraw[i].assigned)
				string += toDraw[i].varPoints;
			if (toDraw[i].active)
				string += toDraw[i].drawLink;
		}
		else if (toDraw[i].type == "line") {
			if (toDraw[i].assigned)
				string += toDraw[i].varPoints;
			if (toDraw[i].active)
				string += toDraw[i].drawLink;
		}
	}
	code.innerHTML = string;
	addListeners();
}

//Add listeners to links in program code window
function addListeners() {
	for (var i = 0; i < toDraw.length; i++) {
		if (toDraw[i].type == "point") { //Element is point object
			if (toDraw[i].assigned) {
				makeListener("pclick" + i, i);
				makeListener("aclick" + i, i);
				makeListener("bclick" + i, i);
				makeListener("delete1" + i, i);
			}
			if (toDraw[i].active) {
				makeListener("draw" + i, i);
				makeListener("delete2" + i, i);
			}
		}
		else if (toDraw[i].type == "line") {
			if (toDraw[i].assigned) {
				makeListener("deleteVar" + i, i);
				makeListener("lclick" + i, i);
				makeListener("startX" + i, i);
				makeListener("startY" + i, i);
				makeListener("endX" + i, i);
				makeListener("endY" + i, i);
			}
			if (toDraw[i].active) {
				makeListener("deleteDraw" + i, i);
				makeListener("draw" + i, i);
			}
		}
	}
	
	//Makes new listener instances for specific link
	function makeListener(evt, index) {
		if (toDraw[index].type == "point") { //Make listeners for point object
			var link = document.getElementById(evt);
			if (evt.search("pclick") != -1) { //User clicked the variable on the left side of the assignment
				link.onclick = function () {
					console.log("Choose from declared variables");
					return false;
				}
			}
			else if (evt.search("aclick") != -1) { //User clicked the x coordinate of a point
				link.onclick = function () {
					console.log("Change value of X coordinate");
					return false;
				}
			}
			else if (evt.search("bclick") != -1) { //User clicked the y coordinate of a point
				link.onclick = function () {
					console.log("Change value of Y coordinate");
					return false;
				}
			}
			else if (evt.search("draw") != -1) { //User clicked the variable inside the draw code for a point
				link.onclick = function () {
					console.log("Change what is drawn");
					return false;
				}
			}
			else if (evt.search("delete1") != -1) { //User clicked the '*' in front of variable assignment for a point
				link.onclick = function () {
					var del = confirm("Are you sure you want to delete the highlighted text?");
					 if (del) {
					 	toDraw[index].assigned = false; //set assigned boolean to false;
					 	writeCode(); //Update Program Code window
					 }
					 else
					 	console.log("Don't delete point assignment");
					return false;
				}
			}
			else if (evt.search("delete2") != -1) { //User clicked the '*' in front of 'draw(p_)
				link.onclick = function () {
					var del = confirm("Are you sure you want to delete the highlighted text?");
						if (del) {
							toDraw[index].active = false; //Currently this deletes the point immediately. Need to implement Run/Walk
							writeCode(); //Update program code window
						}
						else
							console.log("Don't delete draw assignment");
						return false;
				}
			}
		}
		else if (toDraw[index].type == "line") { //Make listeners for line object
			var link = document.getElementById(evt);
			if (evt.search("deleteVar") != -1) { //User clicked the '*' in front of variable assignment for a line
				link.onclick = function () {
					var del = confirm("Are you sure you want to delete the highlighted text?");
					if (del) {
						toDraw[index].assigned = false; //Set assigned boolean to false
						writeCode(); //Update program Code window
					}
					else
						console.log("Don't delete it");
					return false;
				}
			}
			else if (evt.search("lclick") != -1) { //User clicked on variable on the left side of the assignment
				link.onclick = function () {
					console.log("Change what variable user is assigning");
					return false;
				}
			}
			else if (evt.search("startX") != -1) { //User clicked on the X coordinate for the starting position of a line
				link.onclick = function () {
					console.log("change value of startX");
					return false;
				}
			}
			else if (evt.search("startY") != -1) { //User clicked on the Y coordinate for the starting position of a line
				link.onclick = function () {
					console.log("change value of startY");
					return false;
				}
			}
			else if (evt.search("endX") != -1) { //User clicked on the X coordinate for the ending position of a line
				link.onclick = function () {
					console.log("change value of endX");
					return false;
				}
			}
			else if (evt.search("endY") != -1) { //User clicked on the Y coordinate for the ending position of a line
				link.onclick = function () {
					console.log("change value of endY");
					return false;
				}
			}
			else if (evt.search("deleteDraw") != -1) {
				link.onclick = function () {
					var del = confirm("Are you sure you want to delete the highlighted text?");
					if (del) {
						toDraw[index].active = false; //Set active to false
						writeCode(); //Update Program Code window
					}
					else
						console.log("Don't delete it");
					return false;
				}
			}
			else if (evt.search("draw") != -1) {
				link.onclick = function () {
					console.log("change variable that is drawn");
					return false;
				}
			}
		}
	}
}

//Makes text click-able. 'id' defines the name of the tag, 'text' is the text that needs to be click-able
function makeLink(id, text) {
	var string = "";
	string += "<a id='" + id + "' href='' style='color:black;text-decoration:none;'>" + text + "</a>";
	return string;
}

//Allows user to assign values to a declared variable
function assign() {
	
}

//Allows user to choose a shape to draw
function drawShape() {
	
}


// DIAL PAD AREA

var nums = new Array();

// set dialpad to draggable
$("#topopup_numpad").draggable();
// add key listeners
$(document).ready(function(){
                             $(this).keyup(function(event){
                                                           if(event.which == 48)
                                                                          addInt(0);
                                                           if(event.which == 49)
                                                                          addInt(1);
                                                           if(event.which == 50)
                                                                          addInt(2);
                                                           if(event.which == 51)
                                                                          addInt(3);
                                                           if(event.which == 52)
                                                                          addInt(4);
                                                           if(event.which == 53)
                                                                          addInt(5);
                                                           if(event.which == 54)
                                                                          addInt(6);
                                                           if(event.which == 55)
                                                                          addInt(7);
                                                           if(event.which == 56)
                                                                          addInt(8);
                                                           if(event.which == 57)
                                                                          addInt(9);
                             });
});

// load dialpad
function loadPopupNP(){
         //$("#topopup_numpad").fadeIn(0500);
         $("#topopup_numpad").slideDown();
         $("#bgpopup").css("opacity", "0.7");
         $("#bgpopup").fadeIn(0001);
}

// close dialpad
function closePopupNP(){
        // $("#topopup_numpad").fadeOut("normal");
         $("#topopup_numpad").slideUp();
         $("#bgpopup").fadeOut("normal");
         clearTA();
}

// add number to num pad text area
// CURRENT FUNCTIONALITY -> no number over 300 can be entered . end number changes to current press if result is 301+
function addInt(num){
         var currNum = 0;
         var myNumString = document.getElementById("numDisplay").value;
         var currNumString = document.getElementById("numDisplay").value + num.toString();
         for(var i=0; i<currNumString.length; i++){
                 var n = currNumString.charCodeAt(i);
                 if(n >= 48 && n <= 57)
                      currNum += ((n-48) * Math.pow(10, Math.abs(i - (currNumString.length-1))));
         }
         if(currNum <= 300){
                  nums.push(num);
                  document.getElementById("numDisplay").value += num;
         } else {
                  var newNum = myNumString.substring(0, myNumString.length-1) + num.toString();
                  if(Number(newNum) <=300)
                                    document.getElementById("numDisplay").value = newNum;
         }
}

function clearTA(){
         document.getElementById("numDisplay").value = "";
         nums = new Array();
         document.getElementById("debugArea").value = '';
}

function addParams(){
   // TODO
}

// DIAL PAD AREA END











