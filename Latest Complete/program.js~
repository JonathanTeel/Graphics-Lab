/*
 *
 *  Contains code for Program Code window.
 * 
 */

//Declare all variables
var code = document.getElementById('program_code');
var codeSep = 0; //Used for naming div elements that separate code lines

//Point object
function makePoint(startX, startY) {
	this.startX = startX;
	this.startY = startY;
	this.type = 'point';
	this.varNum = pointVariables.length; //Index of this object in pointVariables
	this.drawNum = toDraw.length; //Index of this object in toDraw
	this.active = true; //Boolean to control if shape needs to be drawn or not
	this.assigned = true; //Boolean to control whether variable has been assigned or not
	this.varPoints = makeLink("delete1" + this.drawNum, "* ") +
		makeLink("pclick" + this.drawNum, "p" + this.varNum) + 
		" = (" + makeLink("aclick" + this.drawNum, this.startX) + "," + 
		makeLink("bclick" + this.drawNum, 300-this.startY) + ")" + codeSeparator(this.drawNum);
	this.drawLink = makeLink("delete2" + this.drawNum, "* ") +
		"draw(" + makeLink("draw" + this.drawNum, "p" + this.varNum) + ")" + codeSeparator(this.drawNum);
}
//Line object
function makeLine(startX, startY, endX, endY) {
	this.startX = startX;
	this.startY = startY;
	this.endX = endX;
	this.endY = endY;
	this.type = 'line';
	this.varNum = lineVariables.length; //Index of this object in lineVariables
	this.drawNum = toDraw.length; //Index of this object in toDraw
	this.active = true; //Boolean to control if shape needs to be drawn or not
	this.assigned = true; //Boolean to control whether variable has been assigned or not
	this.varPoints = makeLink("deleteVar" + this.drawNum, "* ") +
		makeLink("lclick" + this.drawNum, "l" + this.varNum) +
		" = ((" + makeLink("startX" + this.drawNum, this.startX) + "," +
		makeLink("startY" + this.drawNum, 300-this.startY) + "),(" +
		makeLink("endX" + this.drawNum, this.endX) + "," +
		makeLink("endY" + this.drawNum, 300-this.endY) + "))" + codeSeparator(this.drawNum);
	this.drawLink = makeLink("deleteDraw" + this.drawNum, "* ") +
		"draw(" + makeLink("draw" + this.drawNum, "l" + this.varNum) + ")" + codeSeparator(this.drawNum); 
}
//Circle object
function makeCircle(startX, startY, diameter) {
	this.startX = startX;
	this.startY = startY;
	this.diameter = diameter;
	this.type = 'circle';
	this.varNum = circleVariables.length;
	this.drawNum = toDraw.length;
	this.active = true;
	this.assigned = true;
	this.varPoints = makeLink("deleteVar" + this.drawNum, "* ") +
		makeLink("cclick" + this.drawNum, "c" + this.varNum) +
		" = ((" + makeLink("startX" + this.drawNum, this.startX) + "," +
		makeLink("startY" + this.drawNum, 300-this.startY) + ")," +
		makeLink("radius" + this.drawNum, this.diameter) + ")" + codeSeparator(this.drawNum);
	this.drawLink = makeLink("deleteDraw" + this.drawNum, "* ") +
		"draw(" + makeLink("draw" + this.drawNum, "c" + this.varNum) + ")" + codeSeparator(this.drawNum);
}
//Polygon object
function makePolygon(angles) {
	this.angles = angles;
	this.type = 'polygon';
	this.varNum = polygonVariables.length;
	this.drawNum = toDraw.length;
	this.active = true;
	this.assigned = true;
	this.varPoints = makeLink("deleteVar" + this.drawNum, "* ") +
		makeLink("gclick" + this.drawNum, "g" + this.varNum) +
		" = (" + codeSeparator(this.drawNum);
		for (var i = 0; i < angles.length; i++) {
			this.varPoints += makeLink("deletePoint" + i, "*") + whiteSpace(10) + 
			"(" + makeLink("startgX" + i, angles[i].startX) + "," +
			makeLink("startgY" + i, 300-angles[i].startY) + ")," + codeSeparator(this.drawNum);
		}
		this.varPoints += whiteSpace(11) + ")" + codeSeparator(this.drawNum);
	this.drawLink = makeLink("deleteDraw" + this.drawNum, "* ") +
		"draw(" + makeLink("draw" + this.drawNum, "g" + this.varNum) + ")" + codeSeparator(this.drawNum);
}


//writes the code in the code window using toDraw array
function writeCode() {
	var string = "";
	
	//Write HTML in program code window
	for (var i = 0; i < toDraw.length; i++) {
		if (toDraw[i].type == "point") { //Element is point object
			if (toDraw[i].assigned)
				string += toDraw[i].varPoints;
			if (toDraw[i].active)
				string += toDraw[i].drawLink;
		}
		else if (toDraw[i].type == "line") {
			if (toDraw[i].assigned)
				string += toDraw[i].varPoints;
			if (toDraw[i].active)
				string += toDraw[i].drawLink;
		}
		else if (toDraw[i].type == "circle") {
			if (toDraw[i].assigned)
				string += toDraw[i].varPoints;
			if (toDraw[i].active)
				string += toDraw[i].drawLink;
		}
		else if (toDraw[i].type == "polygon") {
			if (toDraw[i].assigned)
				string += toDraw[i].varPoints;
			if (toDraw[i].active)
				string += toDraw[i].drawLink;
		}
	}
	code.innerHTML = string;
	addListeners();
	
	//Make links turn red when cursor hovers over them
	$("a").hover(function() {
       $(this).css("color", "red"); 
    },function() {
        $(this).css("color", "black");
    });
    
    //Make all code separators perform something when hovered and clicked
    $(".sep").hover(function() {
        $(this).css("background", "#D1D1E0");
    }, function() {
        $(this).css("background", "white");
    }).click(function() {
        $(this).replaceWith("<br>><br>");
    });
}

//Add listeners to links in program code window
function addListeners() {
	for (var i = 0; i < toDraw.length; i++) {
		if (toDraw[i].type == "point") { //Element is point object
			if (toDraw[i].assigned) {
				makeListener("pclick" + i, i);
				makeListener("aclick" + i, i);
				makeListener("bclick" + i, i);
				makeListener("delete1" + i, i);
			}
			if (toDraw[i].active) {
				makeListener("draw" + i, i);
				makeListener("delete2" + i, i);
			}
		}
		else if (toDraw[i].type == "line") { //Element is a line object
			if (toDraw[i].assigned) {
				makeListener("deleteVar" + i, i);
				makeListener("lclick" + i, i);
				makeListener("startX" + i, i);
				makeListener("startY" + i, i);
				makeListener("endX" + i, i);
				makeListener("endY" + i, i);
			}
			if (toDraw[i].active) {
				makeListener("deleteDraw" + i, i);
				makeListener("draw" + i, i);
			}
		}
		else if (toDraw[i].type == "circle") {
			if (toDraw[i].assigned) {
				makeListener("deleteVar" + i, i);
				makeListener("cclick" + i, i);
				makeListener("startX" + i, i);
				makeListener("startY" + i, i);
				makeListener("radius" + i, i);
			}
			if (toDraw[i].active) {
				makeListener("deleteDraw" + i, i);
				makeListener("draw" + i, i);
			}
		}
		else if (toDraw[i].type == "polygon") {
			if (toDraw[i].assigned) {
				makeListener("deleteVar" + i, i);
				makeListener("gclick" + i, i);
				for (var y = 0; y < toDraw[i].angles.length; y++) {
				    makeListener("deletePoint" + y, i);
					makeListener("startgX" + y, i);
					makeListener("startgY" + y, i);
				}
			}
			if (toDraw[i].active) {
				makeListener("deleteDraw" + i, i);
				makeListener("draw" + i, i);
			}
		}
	}
	
	//Makes new listener instances for specific link
	function makeListener(evt, index) {

	}
}

//Makes text click-able. 'id' defines the name of the tag, 'text' is the text that needs to be click-able
function makeLink(id, text) {
	var string = "";
	string += "<a id='" + id + "' href='#' class='Clickable' style='color:black;text-decoration:none;'>" + text + "</a>";
	return string;
}

//Adds whitespace to HTML
function whiteSpace(spaces) {
	var string = "";
	for (var i = 0; i < spaces; i++)
		string += "&nbsp";
	return string;
}

//Creates separation between code lines with div element
function codeSeparator(index) {
    var string = "<div class='sep' id='separator" + codeSep + "-" + index + 
    "' style='height:5px;width:210px;background-color:white'></div>";
    codeSep++;
    return string;
}

//Allows user to assign values to a declared variable
function assign() {
	console.log("Assign");
}

//Allows user to choose a shape to draw
function drawShape() {
	console.log("Draw declared and assigned shape");
}

//Erases a shape
function erase() {
    console.log("Erase object");
}

//Allow users to change the color of shapes
function changeColor() {
    console.log("change color");
}

//Creates a loop in program window
function loop() {
    console.log("create a loop");
}

//Increments a variable by specified amount
function increment() {
    console.log("increment");
}

//Decrements a variable by specified amount
function decrement() {
    console.log("decrement");
}
